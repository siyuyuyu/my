# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks

# Don't run pre-commit on files under
exclude: "^\
  (Tutorials/.*)\
  (theory/.*)\
  (data/.*)\
  "
#exclude: "(?x)^(\n
#  \ tests/__pycache__/\n)$\n"
fail_fast: false
repos:
  - repo: https://github.com/python-poetry/poetry
    rev: 1.5.0
    hooks:
      - id: poetry-check
      - id: poetry-lock
      - id: poetry-export
        args: ["-f", "requirements.txt", "-o", "requirements.txt"]

  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      #      - id: check-added-large-files # prevents giant files from being committed.
      #        args: ["--maxkb=5000"]
      - id: check-case-conflict # checks for files that would conflict in case-insensitive filesystems.
      - id: check-merge-conflict # checks for files that contain merge conflict strings.
      - id: check-yaml # checks yaml files for parseable syntax.
      - id: detect-private-key # detects the presence of private keys.
      - id: end-of-file-fixer # ensures that a file is either empty, or ends with one newline.
      - id: fix-byte-order-marker # removes utf-8 byte order marker.
      - id: mixed-line-ending # replaces or checks mixed line ending.
      #      - id: requirements-txt-fixer # sorts entries in requirements.txt.
      - id: trailing-whitespace # trims trailing whitespace.
      - id: check-json #- if you have JSON files in your repo
      - id: check-merge-conflict #  useful if you often rebase/merge
      - id: file-contents-sorter # if there are files that benefit from a reliable ordering, this is a handy hook
      - id: check-symlinks # very helpful if there’s symlinks checked in to the index
      - id: destroyed-symlinks # very helpful if there’s symlinks checked in to the index
      - id: check-vcs-permalinks # particularly useful if there’s a lot of documentation files tracked
      - id: no-commit-to-branch
        args: [--branch, staging]
  #    -   id: check-executables-have-shebangs # ensures that (non-binary) executables have a shebang.
  #    -   id: check-shebang-scripts-are-executable # ensures that (non-binary) files with a shebang are executable.

  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.0.0-alpha.9-for-vscode
    hooks:
      - id: prettier
        files: \.(js|ts|jsx|tsx|css|less|html|json|markdown|md|yaml|yml)$

  - repo: https://github.com/psf/black
    rev: 23.3.0
    hooks:
      - id: black

  - repo: https://github.com/PyCQA/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: [--profile=black]

  #  - repo: https://github.com/PyCQA/pylint
  #    rev: v3.0.0a6
  #    hooks:
  #      - id: pylint
  #        args: ["--disable=C0114", "--disable=C0103", "--disable=W0622"]

  #  - repo: local
  #    hooks:
  #      - id: pylint
  #        name: pylint
  #        entry: pylint
  #        language: system
  #        types: [python]
  #        args:
  #          [
  #            "--disable=C0114",
  #            "--disable=C0103",
  #            "--disable=W0622",
  #            "--disable=R0903",
  #          ]
#  - repo: local
#    hooks:
#      - id: pytest-check
#        name: pytest-check
#        stages:
#          - commit
#        types:
#          - python
#        entry: pytest
#        language: system
#        pass_filenames: false
#        always_run: true

#-   repo: https://github.com/pre-commit/mirrors-clang-format
#    rev: v13.0.0
#    hooks:
#      - id: clang-format
